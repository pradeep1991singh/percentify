/*============================================================================*
  CSS Percentage Circle Reference - http://firchow.net/css3-prozentanzeige-kreis/
  http://circle.firchow.net/
/*============================================================================*/

@import "_typography";

// classes 2 extend
.rect-auto {
  clip: rect(auto, auto, auto, auto);
}

.rotate(@degree) {
  transform: rotate(@degree);
}

.box-sizing(@type) {
  box-sizing: @type;
}

.transition(@property, @duration, @function) {
  transition-property: @property;
  transition-duration: @duration;
  transition-timing-function: @function;
}

.pie {
  position: absolute;
  border: @circle-width solid @primary-color;
  width: 1 - (2 * @circle-width);
  height: 1 - (2 * @circle-width);
  clip: rect(0em, 0.5em, 1em, 0em);
  border-radius: @default-border-radius;
  .rotate(0deg);
}

.pie-fill {
  .rotate(180deg);
}

// main
.percentify {
  *,
  *:before,
  *:after {
    .box-sizing(content-box);
  }

  position: relative;
  font-size: @default-font-size;
  width: 1em;
  height: 1em;
  border-radius: @default-border-radius;
  background-color: @secondary-color;

  // center circle to its parent
  &.center {
    float: none;
    margin: 0 auto;
  }

  // centered value inside circle
  > span {
    position: absolute;
    width: 100%;
    z-index: 1;
    left: 0;
    top: 0;
    width: 5em;
    line-height: 5em;
    font-size: 0.2em;
    color: @secondary-color;
    display: block;
    text-align: center;
    white-space: nowrap;
    .transition(all, 0.2s, ease-out);

    &.text {
      font-family: @default-font-family;
    }
  }

  // background inside the circle
  &:after {
    position: absolute;
    top: @circle-width;
    left: @circle-width;
    display: block;
    content: " ";
    border-radius: @default-border-radius;
    background-color: @bg-color;
    width: 1 - (2 * @circle-width);
    height: 1 - (2 * @circle-width);
    .transition(all, 0.2s, ease-out);
  }

  // the slice (mask)
  .slice {
    position: absolute;
    width: 1em;
    height: 1em;
    clip: rect(0em, 1em, 1em, 0.5em);
  }

  // circle to show the status
  .bar {
    .pie;
  }

  // loop to create all needed elements automatically
  .percentage-elems();
  .percentage-elems(@n: 100, @i: 51) when (@i =< @n) {
    &.p@{i} .slice {
      .rect-auto;
    }

    &.p@{i} .bar:after {
      .pie-fill;
    }

    &.p@{i} .fill {
      .pie;
      .pie-fill;
    }

    .percentage-elems(@n, (@i + 1));
  }

  // loop to rotate all 100 circles
  .circle-elems();
  .circle-elems(@m: 100, @j: 1) when (@j =< @m) {
    &.p@{j} .bar {
      .rotate(unit((360/100*@j), deg));
    }

    .circle-elems(@m, (@j + 1));
  }

  // hover styles text content
  &:hover {
    cursor: pointer;

    > span {
      width: 3.33em;
      line-height: 3.33em;
      font-size: 0.3em;
      color: @primary-color;
    }

    &:after {
      top: @circle-width-hover;
      left: @circle-width-hover;
      width: 1 - (2 * @circle-width-hover);
      height: 1 - (2 * @circle-width-hover);
    }
  }

  &.active {
    > span {
      color: @primary-color;
      &:before {
        color: @primary-color;
      }
    }
  }

  // icon font sizes from 15px-200px
  .icons-sizes(500, 12);
  .icons-sizes(@n, @i) when (@i <= @n) {
    &.cfs@{i},
    > .tfs@{i},
    > .ifs@{i}:before {
      font-size: unit(@i, px);
    }

    // hover styles for icons
    &:hover > .ifs@{i}:before {
      font-size: (@i + round(@i/2px));
      .transition(all, 0.2s, ease-out);
    }

    .icons-sizes(@n, (@i + 1));
  }
}
